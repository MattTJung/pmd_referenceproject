import json
import os
import rdflib
import argparse
from rdflib.namespace import RDF, XSD, OWL, DCTERMS, RDFS, PROV, FOAF

PMD = rdflib.Namespace('https://w3id.org/pmd/co/')
TTO = rdflib.Namespace('https://w3id.org/pmd/tto/')
QUDT = rdflib.Namespace('https://qudt.org/vocab/unit/')

parser = argparse.ArgumentParser()
parser.add_argument('-n', '--namespace', required=True, help='Namespace for the ABox')
args = parser.parse_args()

EX = rdflib.Namespace(args.namespace)

units = {
    'mm': QUDT.MilliM,
    'mms-1': QUDT.term("MilliM-PER-S"),
    's-1': QUDT.term("PER-SEC"),
    'mm2': QUDT.MilliM2,
    'MPa': QUDT.MegaPA,
    'percent': QUDT.PERCENT
}

dtypes = {
    'string': XSD.string,
    'float': XSD.float,
    'date': XSD.date
}

g = rdflib.Graph()
g.bind('pmd', PMD)
g.bind('tto', TTO)
g.bind('qudt', QUDT)
g.bind('', EX)

jannis = rdflib.BNode()
g.add((jannis, RDF.type, PROV.Person))
g.add((jannis, RDF.type, FOAF.Person))
g.add((jannis, RDFS.label, rdflib.Literal("Jannis Grundmann")))
g.add((jannis, FOAF.familyName, rdflib.Literal("Grundmann")))
g.add((jannis, FOAF.givenName, rdflib.Literal("Jannis")))

ouri = rdflib.URIRef(args.namespace)
g.add((ouri, RDF.type, OWL.Ontology))
g.add((ouri, OWL.versionInfo, rdflib.Literal("1.0.0")))
g.add((ouri, OWL.versionIRI, rdflib.Literal(f"{args.namespace}1.0.0/")))
g.add((ouri, DCTERMS.license, rdflib.URIRef("https://creativecommons.org/licenses/by/4.0/")))
g.add((ouri, DCTERMS.created, rdflib.Literal("2024-02-09", datatype=XSD.date)))
g.add((ouri, DCTERMS.creator, rdflib.URIRef("https://orcid.org/0000-0003-0086-5808")))
g.add((ouri, DCTERMS.contributor, rdflib.URIRef("https://orcid.org/0000-0002-9014-2920")))
g.add((ouri, DCTERMS.contributor, rdflib.URIRef("https://orcid.org/0000-0003-4461-6539")))
g.add((ouri, DCTERMS.contributor, rdflib.URIRef("https://orcid.org/0000-0002-9014-2920")))
g.add((ouri, DCTERMS.contributor, jannis))
g.add((ouri, DCTERMS.title, rdflib.Literal("PMD Reference Dataset", lang="en")))
g.add((ouri, RDFS.comment, rdflib.Literal("""This ontology describes the findings from a project to create a reference data set for the PMD (Plattform Material Digital). It's intended to serve as a basis for developing and testing semantic web technology applications in the MSE domain. It uses the PMDco and the application ontology TTO.""", lang="en")))
g.add((ouri, OWL.imports, rdflib.URIRef("https://w3id.org/pmd/co/2.0.7/")))
g.add((ouri, OWL.imports, rdflib.URIRef("https://w3id.org/pmd/tto/2.0.1/")))

specimen_list = [f.split('.')[0] for f in os.listdir('./original_data')]
first = True
for specimen_id in specimen_list:
    with open(f"resources/{specimen_id}.json", 'r', encoding='utf8') as f:
        specimen_data = json.load(f)

    if first:
        tensile_test_machine = EX.term(f"tensile_test_machine_{specimen_data['machine_type']['value'].replace(' ', '_')}")
        tensile_test_machine_node_model = rdflib.BNode()
        g.add((tensile_test_machine, RDF.type, TTO.TensileTestingMachine))
        g.add((tensile_test_machine, PMD.characteristic, tensile_test_machine_node_model))
        g.add((tensile_test_machine_node_model, RDF.type, PMD.NodeModel))
        g.add((tensile_test_machine_node_model, PMD.value, rdflib.Literal(f"{specimen_data['machine_type']['value']}", datatype=dtypes[specimen_data['machine_type']['datatype']])))

        material = EX.term(f"material_{specimen_data['material']['value'].replace(' ', '_')}")
        material_name = rdflib.BNode()
        g.add((material, RDF.type, PMD.Material))
        g.add((material_name, RDF.type, PMD.MaterialDesignation))
        g.add((material_name, RDF.type, PMD.Metadata))
        g.add((material, PMD.characteristic, material_name))
        g.add((material_name, PMD.value, rdflib.Literal(f"{specimen_data['material']['value']}", datatype=dtypes[specimen_data['material']['datatype']])))

    specimen = EX.term(f"specimen_{specimen_data['id']['value'].replace(' ', '_')}")
    specimen_testpiecename_id = rdflib.BNode()
    specimen_testpiecename_name = rdflib.BNode()
    specimen_originaldiameter = rdflib.BNode()
    specimen_gaugelength = rdflib.BNode()
    specimen_parallellength = rdflib.BNode()
    specimen_testpieceinfo = rdflib.BNode()
    specimen_originalcrosssection = rdflib.BNode()
    specimen_originalcrosssection_note = rdflib.BNode()
    specimen_note = rdflib.BNode()
    g.add((specimen, RDF.type, PMD.Specimen))
    g.add((specimen, PMD.characteristic, specimen_testpiecename_id))
    g.add((specimen, PMD.characteristic, specimen_testpiecename_name))
    g.add((specimen, PMD.characteristic, specimen_originaldiameter))
    g.add((specimen, PMD.characteristic, specimen_gaugelength))
    g.add((specimen, PMD.characteristic, specimen_parallellength))
    g.add((specimen, PMD.characteristic, specimen_testpieceinfo))
    g.add((specimen, PMD.characteristic, specimen_originalcrosssection))
    g.add((specimen, PMD.characteristic, specimen_note))
    g.add((specimen_testpiecename_id, RDF.type, PMD.TestPieceName))
    g.add((specimen_testpiecename_id, RDF.type, PMD.Metadata))
    g.add((specimen_testpiecename_id, PMD.value, rdflib.Literal(f"{specimen_data['id']['value']}", datatype=dtypes[specimen_data['id']['datatype']])))
    g.add((specimen_testpiecename_name, RDF.type, PMD.TestPieceName))
    g.add((specimen_testpiecename_name, RDF.type, PMD.Metadata))
    g.add((specimen_testpiecename_name, PMD.value, rdflib.Literal(f"{specimen_data['name']['value']}", datatype=dtypes[specimen_data['name']['datatype']])))
    g.add((specimen_originaldiameter, RDF.type, TTO.OriginalDiameter))
    g.add((specimen_originaldiameter, RDF.type, PMD.Metadata))
    g.add((specimen_originaldiameter, PMD.value, rdflib.Literal(f"{specimen_data['originaldiameter']['value']}", datatype=dtypes[specimen_data['originaldiameter']['datatype']])))
    g.add((specimen_originaldiameter, PMD.unit, units[specimen_data['originaldiameter']['unit']]))
    g.add((specimen_gaugelength, RDF.type, TTO.OriginalGaugeLength))
    g.add((specimen_gaugelength, RDF.type, PMD.Metadata))
    g.add((specimen_gaugelength, PMD.value, rdflib.Literal(f"{specimen_data['gaugelength']['value']}", datatype=dtypes[specimen_data['gaugelength']['datatype']])))
    g.add((specimen_gaugelength, PMD.unit, units[specimen_data['gaugelength']['unit']]))
    g.add((specimen_parallellength, RDF.type, TTO.ParallelLength))
    g.add((specimen_parallellength, RDF.type, PMD.Metadata))
    g.add((specimen_parallellength, PMD.value, rdflib.Literal(f"{specimen_data['parallellength']['value']}", datatype=dtypes[specimen_data['parallellength']['datatype']])))
    g.add((specimen_parallellength, PMD.unit, units[specimen_data['parallellength']['unit']]))
    g.add((specimen_testpieceinfo, RDF.type, PMD.TestPieceInfo))
    g.add((specimen_testpieceinfo, RDF.type, PMD.Metadata))
    g.add((specimen_testpieceinfo, PMD.value, rdflib.Literal(f"{specimen_data['specimen_type']['value']}", datatype=dtypes[specimen_data['specimen_type']['datatype']])))
    g.add((specimen_originalcrosssection, RDF.type, PMD.CrossSectionArea))
    g.add((specimen_originalcrosssection, RDF.type, PMD.Metadata))
    g.add((specimen_originalcrosssection, PMD.value, rdflib.Literal(f"{specimen_data['originalcrosssection']['value']}", datatype=dtypes[specimen_data['originalcrosssection']['datatype']])))
    g.add((specimen_originalcrosssection, PMD.unit, units[specimen_data['originalcrosssection']['unit']]))
    g.add((specimen_originalcrosssection, PMD.characteristic, specimen_originalcrosssection_note))
    g.add((specimen_originalcrosssection_note, RDF.type, PMD.Note))
    g.add((specimen_originalcrosssection_note, RDF.type, PMD.Metadata))
    g.add((specimen_originalcrosssection_note, PMD.value, rdflib.Literal("Original cross section", datatype=XSD.string)))
    g.add((specimen_note, RDF.type, PMD.Note))
    g.add((specimen_note, RDF.type, PMD.Metadata))
    g.add((specimen_note, PMD.value, rdflib.Literal(f"{specimen_data['heattreatmentbatch']['value']}", datatype=dtypes[specimen_data['heattreatmentbatch']['datatype']])))

    tensile_test = EX.term(f"tensile_test_{specimen_data['id']['value'].replace(' ', '_')}")
    tensile_test_date = rdflib.BNode()
    tensile_test_standard = rdflib.BNode()
    tensile_test_temperature = rdflib.BNode()
    tensile_test_strainrate = rdflib.BNode()
    tensile_test_crossheadsepspeed = rdflib.BNode()
    tensile_test_output_tensilestrength = rdflib.BNode()
    tensile_test_output_yield02 = rdflib.BNode()
    tensile_test_output_yield1 = rdflib.BNode()
    tensile_test_output_crosssection = rdflib.BNode()
    tensile_test_output_crosssection_note = rdflib.BNode()
    tensile_test_output_reductionofarea = rdflib.BNode()
    tensile_test_output_uniformelongation = rdflib.BNode()
    tensile_test_output_elongationafterfracture = rdflib.BNode()
    tensile_test_output_slopeoftheelasticpart = rdflib.BNode()
    g.add((tensile_test, RDF.type, TTO.TensileTest))
    g.add((tensile_test, PMD.characteristic, tensile_test_date))
    g.add((tensile_test, PMD.characteristic, tensile_test_standard))
    g.add((tensile_test, PMD.characteristic, tensile_test_temperature))
    g.add((tensile_test, PMD.characteristic, tensile_test_strainrate))
    g.add((tensile_test, PMD.characteristic, tensile_test_crossheadsepspeed))
    g.add((tensile_test, PMD.output, tensile_test_output_tensilestrength))
    g.add((tensile_test, PMD.output, tensile_test_output_yield02))
    g.add((tensile_test, PMD.output, tensile_test_output_yield1))
    g.add((tensile_test, PMD.output, tensile_test_output_reductionofarea))
    g.add((tensile_test, PMD.output, tensile_test_output_uniformelongation))
    g.add((tensile_test, PMD.output, tensile_test_output_elongationafterfracture))
    g.add((tensile_test, PMD.output, tensile_test_output_slopeoftheelasticpart))
    g.add((tensile_test, PMD.output, tensile_test_output_crosssection))
    g.add((tensile_test, PMD.input, specimen))
    g.add((tensile_test, PMD.participant, tensile_test_machine))
    g.add((tensile_test_date, RDF.type, PMD.Date))
    g.add((tensile_test_date, RDF.type, PMD.Metadata))
    g.add((tensile_test_date, PMD.value, rdflib.Literal(f"{specimen_data['dateoftest']['value']}", datatype=dtypes[specimen_data['dateoftest']['datatype']])))
    g.add((tensile_test_standard, RDF.type, PMD.Norm))
    g.add((tensile_test_standard, RDF.type, PMD.Metadata))
    g.add((tensile_test_standard, PMD.value, rdflib.Literal(f"{specimen_data['standard']['value']}", datatype=dtypes[specimen_data['standard']['datatype']])))
    g.add((tensile_test_temperature, RDF.type, PMD.EnvironmentalTemperature))
    g.add((tensile_test_temperature, RDF.type, PMD.Metadata))
    g.add((tensile_test_temperature, PMD.value, rdflib.Literal(f"{specimen_data['temperature']['value']}", datatype=dtypes[specimen_data['temperature']['datatype']])))
    g.add((tensile_test_strainrate, RDF.type, TTO.StrainRate))
    g.add((tensile_test_strainrate, RDF.type, PMD.SetPoint))
    g.add((tensile_test_strainrate, PMD.value, rdflib.Literal(f"{specimen_data['strainrate']['value']}", datatype=dtypes[specimen_data['strainrate']['datatype']])))
    g.add((tensile_test_strainrate, PMD.unit, units[specimen_data['strainrate']['unit']]))
    g.add((tensile_test_crossheadsepspeed, RDF.type, TTO.CrossheadSeparationRate))
    g.add((tensile_test_crossheadsepspeed, RDF.type, PMD.SetPoint))
    g.add((tensile_test_crossheadsepspeed, PMD.value, rdflib.Literal(f"{specimen_data['crossheadsepspeed']['value']}", datatype=dtypes[specimen_data['crossheadsepspeed']['datatype']])))
    g.add((tensile_test_crossheadsepspeed, PMD.unit, units[specimen_data['crossheadsepspeed']['unit']]))
    g.add((tensile_test_output_tensilestrength, RDF.type, TTO.TensileStrength))
    g.add((tensile_test_output_tensilestrength, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_tensilestrength, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_tensilestrength, PMD.value, rdflib.Literal(f"{specimen_data['tensilestrength']['value']}", datatype=dtypes[specimen_data['tensilestrength']['datatype']])))
    g.add((tensile_test_output_tensilestrength, PMD.unit, units[specimen_data['tensilestrength']['unit']]))
    g.add((tensile_test_output_yield02, RDF.type, TTO.Rp02))
    g.add((tensile_test_output_yield02, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_yield02, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_yield02, PMD.value, rdflib.Literal(f"{specimen_data['yield02']['value']}", datatype=dtypes[specimen_data['yield02']['datatype']])))
    g.add((tensile_test_output_yield02, PMD.unit, units[specimen_data['yield02']['unit']]))
    g.add((tensile_test_output_yield1, RDF.type, TTO.ProofStrengthPlasticExtension))
    g.add((tensile_test_output_yield1, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_yield1, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_yield1, TTO.relatesToExtension, rdflib.Literal(1., datatype=XSD.float)))
    g.add((tensile_test_output_yield1, PMD.value, rdflib.Literal(f"{specimen_data['yield1']['value']}", datatype=dtypes[specimen_data['yield1']['datatype']])))
    g.add((tensile_test_output_yield1, PMD.unit, units[specimen_data['yield1']['unit']]))
    g.add((tensile_test_output_crosssection, RDF.type, PMD.CrossSectionArea))
    g.add((tensile_test_output_crosssection, RDF.type, PMD.Metadata))
    g.add((tensile_test_output_crosssection, PMD.value, rdflib.Literal(f"{specimen_data['crosssectionafterfracture']['value']}", datatype=dtypes[specimen_data['crosssectionafterfracture']['datatype']])))
    g.add((tensile_test_output_crosssection, PMD.unit, units[specimen_data['crosssectionafterfracture']['unit']]))
    g.add((tensile_test_output_crosssection, PMD.characteristic, tensile_test_output_crosssection_note))
    g.add((tensile_test_output_crosssection_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_crosssection_note, RDF.type, PMD.Metadata))
    g.add((tensile_test_output_crosssection_note, PMD.value, rdflib.Literal("Specimen cross-section after fracture", datatype=XSD.string)))
    g.add((tensile_test_output_reductionofarea, RDF.type, TTO.PercentageReductionOfArea))
    g.add((tensile_test_output_reductionofarea, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_reductionofarea, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_reductionofarea, PMD.value, rdflib.Literal(f"{specimen_data['reductionofarea']['value']}", datatype=dtypes[specimen_data['reductionofarea']['datatype']])))
    g.add((tensile_test_output_reductionofarea, PMD.unit, units[specimen_data['reductionofarea']['unit']]))
    g.add((tensile_test_output_uniformelongation, RDF.type, TTO.PercentagePlasticExtensionAtMaximumForce))
    g.add((tensile_test_output_uniformelongation, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_uniformelongation, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_uniformelongation, PMD.value, rdflib.Literal(f"{specimen_data['uniformelongation']['value']}", datatype=dtypes[specimen_data['uniformelongation']['datatype']])))
    g.add((tensile_test_output_uniformelongation, PMD.unit, units[specimen_data['uniformelongation']['unit']]))
    g.add((tensile_test_output_elongationafterfracture, RDF.type, TTO.PercentagePermanentElongation))
    g.add((tensile_test_output_elongationafterfracture, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_elongationafterfracture, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_elongationafterfracture, PMD.value, rdflib.Literal(f"{specimen_data['elongationafterfracture']['value']}", datatype=dtypes[specimen_data['elongationafterfracture']['datatype']])))
    g.add((tensile_test_output_elongationafterfracture, PMD.unit, units[specimen_data['elongationafterfracture']['unit']]))
    g.add((tensile_test_output_slopeoftheelasticpart, RDF.type, TTO.SlopeOfTheElasticPart))
    g.add((tensile_test_output_slopeoftheelasticpart, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_slopeoftheelasticpart, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_slopeoftheelasticpart, PMD.value, rdflib.Literal(f"{specimen_data['slopeoftheelasticpart']['value']}", datatype=dtypes[specimen_data['slopeoftheelasticpart']['datatype']])))
    g.add((tensile_test_output_slopeoftheelasticpart, PMD.unit, units[specimen_data['slopeoftheelasticpart']['unit']]))

    tt_dataset = EX.term(f"{specimen_id}_dataset")

    tensile_test_output_table_time = rdflib.BNode()
    tensile_test_output_table_displacement = rdflib.BNode()
    tensile_test_output_table_force = rdflib.BNode()
    tensile_test_output_table_machinedisplacement = rdflib.BNode()
    tensile_test_output_table_engstrain = rdflib.BNode()
    tensile_test_output_table_engstress = rdflib.BNode()
    tensile_test_output_table_truestrain = rdflib.BNode()
    tensile_test_output_table_truestress = rdflib.BNode()
    tensile_test_output_table_machinedisplacement_note = rdflib.BNode()
    tensile_test_output_table_engstrain_note = rdflib.BNode()
    tensile_test_output_table_engstress_note = rdflib.BNode()
    tensile_test_output_table_truestrain_note = rdflib.BNode()
    tensile_test_output_table_truestress_note = rdflib.BNode()

    g.add((tensile_test, PMD.output, tensile_test_output_table_time))
    g.add((tensile_test, PMD.output, tensile_test_output_table_displacement))
    g.add((tensile_test, PMD.output, tensile_test_output_table_force))
    g.add((tensile_test, PMD.output, tensile_test_output_table_machinedisplacement))
    g.add((tensile_test, PMD.output, tensile_test_output_table_engstrain))
    g.add((tensile_test, PMD.output, tensile_test_output_table_engstress))
    g.add((tensile_test, PMD.output, tensile_test_output_table_truestrain))
    g.add((tensile_test, PMD.output, tensile_test_output_table_truestress))

    g.add((tensile_test_output_table_time, RDF.type, PMD.Time))
    g.add((tensile_test_output_table_time, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_time, RDF.type, PMD.PrimaryData))
    g.add((tensile_test_output_table_time, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_displacement, RDF.type, TTO.Elongation))
    g.add((tensile_test_output_table_displacement, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_displacement, RDF.type, PMD.PrimaryData))
    g.add((tensile_test_output_table_displacement, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_force, RDF.type, PMD.Force))
    g.add((tensile_test_output_table_force, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_force, RDF.type, PMD.PrimaryData))
    g.add((tensile_test_output_table_force, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_machinedisplacement, RDF.type, PMD.Elongation))
    g.add((tensile_test_output_table_machinedisplacement, PMD.characteristic, tensile_test_output_table_machinedisplacement_note))
    g.add((tensile_test_output_table_machinedisplacement_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_table_machinedisplacement_note, PMD.value, rdflib.Literal("Machine displacement", datatype=dtypes['string'])))
    g.add((tensile_test_output_table_machinedisplacement, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_machinedisplacement, RDF.type, PMD.PrimaryData))
    g.add((tensile_test_output_table_machinedisplacement, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_engstrain, RDF.type, PMD.PercentageExtension))
    g.add((tensile_test_output_table_engstrain, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_engstrain, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_table_engstrain, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_engstrain, PMD.characteristic, tensile_test_output_table_engstrain_note))
    g.add((tensile_test_output_table_engstrain_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_table_engstrain_note, PMD.value, rdflib.Literal("Machine displacement", datatype=dtypes['string'])))

    g.add((tensile_test_output_table_engstress, RDF.type, PMD.Stress))
    g.add((tensile_test_output_table_engstress, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_engstress, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_table_engstress, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_engstress, PMD.characteristic, tensile_test_output_table_engstress_note))
    g.add((tensile_test_output_table_engstress_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_table_engstress_note, PMD.value, rdflib.Literal("Machine displacement", datatype=dtypes['string'])))

    g.add((tensile_test_output_table_truestrain, RDF.type, PMD.PercentageExtension))
    g.add((tensile_test_output_table_truestrain, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_truestrain, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_table_truestrain, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_truestrain, PMD.characteristic, tensile_test_output_table_truestrain_note))
    g.add((tensile_test_output_table_truestrain_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_table_truestrain_note, PMD.value, rdflib.Literal("True Strain", datatype=dtypes['string'])))

    g.add((tensile_test_output_table_truestress, RDF.type, PMD.Stress))
    g.add((tensile_test_output_table_truestress, RDF.type, PMD.Measurement))
    g.add((tensile_test_output_table_truestress, RDF.type, PMD.SecondaryData))
    g.add((tensile_test_output_table_truestress, PMD.resource, tt_dataset))
    g.add((tensile_test_output_table_truestress, PMD.characteristic, tensile_test_output_table_truestress_note))
    g.add((tensile_test_output_table_truestress_note, RDF.type, PMD.Note))
    g.add((tensile_test_output_table_truestress_note, PMD.value, rdflib.Literal("True Stress", datatype=dtypes['string'])))
    
    first = False

g.serialize('refdataproject_tensiletests.ttl', format='turtle')
